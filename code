#include <iostream>
#include <vector>
#include <math.h>
#include <fstream>
//#include <graphics.h>

using namespace std;

// ODUZIMANJE DVA VEKTORA:

vector<double> sub (vector<double> a, vector<double> b){
    vector<double> sol;
    for (int i=0;i<a.size();i++)
        sol.push_back(a[i] - b[i]);
    return sol;
}

//MNOZENJE MATRICE I VEKTORA:

vector<double> mul (vector<vector<double>> q, vector<double> b){
    vector<double> sol;
    for (int i=0;i<q.size();i++){
        double sum = 0;
        for (int j=0;j<q[0].size();j++){
            sum += q[i][j] * b[j];
        }
        sol.push_back(sum);
    }
    return sol;
}

//SKALARNO MNOZENJE VEKTORA:

double mul (vector<double> a, vector<double> b){
    double sol=0;
    for (int i=0;i<a.size();i++)
        sol += a[i] * b[i];
    return sol;
}

//MNOZENJE SKALARA I VEKORA:

vector<double> mul(double a, vector<double> b){
    vector<double> sol;
    for (int i=0;i<b.size();i++)
        sol.push_back(b[i] * a);
    return sol;
}

//NORMA VEKTORA:

double norm(vector<double> a){
    double sol = 0;
    for (int i=0;i<a.size();i++)
        sol+=a[i]*a[i];
    return sqrt(sol);
}

int main()
{
    // UCITAVAMO PODATKE U FORMATU:
    // N
    // Q
    // b
    ifstream in;
    in.open("inin.txt");
    if (in.is_open()){
    int n;
    in >> n;
    vector<vector<double>> q(n);
    vector<double> emp = {};
    for (int i=0;i<n;i++){
        q[i] = emp;
        for (int j=0;j<n;j++){
            double d;
            in >> d;
            q[i].push_back(d);
        }
    }
    vector<double> b;
    for (int i=0;i<n;i++){
        double d;
        in >> d;
        b.push_back(d);
    }
    //ALGORITAM METODE KONJUGOVANIH GRADIJENATA
    // SA IZMENOM DA BETE STAVLJAMO NA KRAJ VEKTORA b, KOJI NAM U ALGORITMU I OVAKO NE TREBA
    int k=0;
    vector<vector<double>> x, f, d;
    vector<double> alfa;
    vector<double> emptyn;
    for (int i=0;i<n;i++)
        emptyn.push_back(0);
    vector<double> dstart = emptyn;
    x.push_back(emptyn);
    f.push_back(sub(mul(q, x[0]), b));
    while (norm(f[k]) >= 0.000001){
        if (k >= 1){
            b.push_back(mul(f[k], f[k]) / mul(f[k-1], f[k-1]));
        }
        if (k >= 1){
            d.push_back(sub(mul(b[n+k-1], d[k-1]), f[k]));
        }
        else{
            d.push_back(mul(-1, f[k]));
        }
        alfa.push_back(mul(f[k], f[k]) / mul( mul(q, d[k]), d[k]) );
        x.push_back(sub(x[k],  mul(-1*alfa[k], d[k] )) );
        f.push_back( sub( f[k], mul(-1*alfa[k], mul(q, d[k])) )  );
        k++;
    }
    cout << "Minimum se postize za x = ";
    for (int i=0;i<n;i++)
        cout << x[k][i]<<" ";
    cout << endl;
    cout << "Unesite bilo sta da izadjete iz programa" <<endl;
    string s;
    cin >> s;
    }
    else{
        cout << "Neuspesno ucitavanje podataka" << endl;
        cout << "Unesite bilo sta da napustite program" << endl;
        string s;
        cin >> s;
    }
    return 0;
}
